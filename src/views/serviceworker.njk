---
permalink: /serviceworker.js
---
/*
Build date: {{site.buildtime | readableDateTime}}
{{ site.buildtime }}
*/

{% if isDev %}
  {% set version %}{{ site.buildtime | ms }}{%- endset %}
{% else %}
  {% set version %}{{ gitinfo.abbrevHash }}{%- endset %}
{% endif %}

const version = "v.{{ version }}-";
const staticCacheName = version + "-staticfiles";
const imagesCacheName = "images";
const pagesCacheName = "pages";
const cacheList = [staticCacheName, imagesCacheName, pagesCacheName];

{# retrieve all bundled scripts/styles that should be cached on installation #}
{%- set manifestList = manifest.getAll() %}
{%- set showLogging =  false %}

function log(params) {
  if({{ showLogging }}){
    console.log(params);
  }
}

addEventListener("install", (installEvent) => {
  skipWaiting();
  installEvent.waitUntil(
    caches.open(staticCacheName).then((staticCache) => {
      staticCache.addAll([
        // nice to haves
        "/stats/",
        "/statistics/",
        "/about/",
        "/favicon.ico",
        "/images/fallback.svg",
        "/test/",
        "/posts.json",
        {%- for item in collections.posts %}
        "{{ item.url | jsonpath }}"{% if not loop.last %},{% endif %}
{%- endfor -%}
      ]);
      return staticCache.addAll([
        // must haves
        {%- for item in manifestList %}
        "{{ item }}",
        {%- endfor %}
        "/offline/",
      ]);
    })
  );
});

addEventListener("activate", function (activateEvent) {
  activateEvent.waitUntil(
    caches
      .keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (!cacheList.includes(cacheName)) {
              log(`deleting cache: ${cacheName}`);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        return clients.claim();
      })
  );
});

addEventListener("fetch", (fetchEvent) => {
  const request = fetchEvent.request;
  log(`starting fetch(${request.url})`);

  // if URL is HTML
  if(request.headers.get("Accept")) {
  if (request.headers.get("Accept").includes("text/html")) {

    // if URL is a post type
    if (/\/posts\/.+/.test(request.url)) {
      log(`requesting post type: ${request.url}`);
      fetchEvent.respondWith(
        caches.match(request).then((responseFromCache) => {
          if (responseFromCache) {
            fetchEvent.waitUntil(stashInCache(request, pagesCacheName));
            return responseFromCache;
          }
          return fetch(request)
            .then((responseFromFetch) => {
              const copy = responseFromFetch.clone();
              fetchEvent.waitUntil(
                caches.open(pagesCacheName).then((pagesCache) => {
                  return pagesCache.put(request, copy);
                })
              );
              return responseFromFetch;
            })
            .catch((error) => {
              return caches.match("/offline/");
            });
        })
      );
      return;
    }

    // if URL is a different HTML page (e.g. /contact/ or homepage)
    log(`requesting non-post HTML: ${request.url}`);
    fetchEvent.respondWith(
      fetch(request)
        .then((responseFromFetch) => {
          log(
            `remote request for ${request.url} returned ${responseFromFetch.status}`
          );
          const copy = responseFromFetch.clone();
          fetchEvent.waitUntil(
            caches.open(pagesCacheName).then((pagesCache) => {
              return pagesCache.put(request, copy);
            })
          );
          log(`returning responseFromFetch for ${request.url}`);
          return responseFromFetch;
        })
        .catch((error) => {
          log(`fetch(${request.url}) returned error`);
          return caches.match(request).then((responseFromCache) => {
            log(`look for ${request.url} in caches`);
            if (responseFromCache) {
              log(`found ${request.url} in cache`);
              return responseFromCache;
            }
            log(
              `couldn't get ${request.url} from caches or server, returning offline.html`
            );
            return caches.match("/offline/");
          });
        })
    );
    return;
  }

  if (request.headers.get("Accept").includes("image")) {
    log(`requesting IMG: ${request.url}`);
    fetchEvent.respondWith(
      caches.match(request).then((responseFromCache) => {
        if (responseFromCache) {
          fetchEvent.waitUntil(stashInCache(request, imagesCacheName));
          log(
            `response from local cache via serviceworker: ${request.url}`
          );
          return responseFromCache;
        }
        return fetch(request)
          .then((responseFromFetch) => {
            //responseFromFetch is a stream so can't be used multiple times
            const copy = responseFromFetch.clone();
            fetchEvent.waitUntil(
              caches.open(imagesCacheName).then((imageCache) => {
                imageCache.put(request, copy);
              })
            );
            return responseFromFetch;
          })
          .catch((error) => {
            log(`replacing ${request.url} with fallback.svg`);
            return caches.match("/images/fallback.svg");
          });
      })
    );
    return;
  }

  // for all other types of files - JS, CSS ...
  fetchEvent.respondWith(
    caches.match(request).then((responseFromCache) => {
      log(
        `pulling non-image/non-HTML from cache first: ${request.url}`
      );
      if (responseFromCache) {
        return responseFromCache;
      }
      log(`couldn't find it; fetching from server: ${request.url}`);
      return fetch(request);
    })
  );
}});

addEventListener("message", (messageEvent) => {
  // log(`MESSAGE: ${messageEvent.data}`);
  if (messageEvent.data === "clean up caches") {
    trimCache(pagesCacheName, 20);
    trimCache(imagesCacheName, 20);
  }
});

function trimCache(cacheName, maxItems) {
  // log(`clearing cache: ${cacheName}`);
  caches.open(cacheName).then((cache) => {
    cache.keys().then((items) => {
      // log(`${items.length} items found in cache ${cacheName}`);
      if (items.length > maxItems) {
        cache.delete(items[0]).then(trimCache(cacheName, maxItems));
      }
    });
  });
}

function stashInCache(request, cacheName) {
  fetch(request).then((responseFromFetch) => {
    caches.open(cacheName).then((theCache) => {
      return theCache.put(request, responseFromFetch);
    });
  });
}
